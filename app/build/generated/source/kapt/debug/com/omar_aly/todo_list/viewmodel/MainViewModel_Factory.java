// Generated by Dagger (https://dagger.dev).
package com.omar_aly.todo_list.viewmodel;

import com.omar_aly.todo_list.usecase.DeleteToDoUseCase;
import com.omar_aly.todo_list.usecase.GetAllTodoListUseCase;
import com.omar_aly.todo_list.usecase.GetOneToDoUseCase;
import com.omar_aly.todo_list.usecase.InsertTaskUseCase;
import com.omar_aly.todo_list.usecase.SetTaskDoingUseCase;
import com.omar_aly.todo_list.usecase.SetTaskDoneUseCase;
import com.omar_aly.todo_list.usecase.UpdateTaskUseCase;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<GetOneToDoUseCase> getOneToDoProvider;

  private final Provider<InsertTaskUseCase> insertTaskProvider;

  private final Provider<DeleteToDoUseCase> deleteToDoProvider;

  private final Provider<UpdateTaskUseCase> updateTaskProvider;

  private final Provider<SetTaskDoingUseCase> setTaskDoingProvider;

  private final Provider<SetTaskDoneUseCase> setTaskDoneProvider;

  private final Provider<GetAllTodoListUseCase> getTodoListProvider;

  public MainViewModel_Factory(Provider<GetOneToDoUseCase> getOneToDoProvider,
      Provider<InsertTaskUseCase> insertTaskProvider,
      Provider<DeleteToDoUseCase> deleteToDoProvider,
      Provider<UpdateTaskUseCase> updateTaskProvider,
      Provider<SetTaskDoingUseCase> setTaskDoingProvider,
      Provider<SetTaskDoneUseCase> setTaskDoneProvider,
      Provider<GetAllTodoListUseCase> getTodoListProvider) {
    this.getOneToDoProvider = getOneToDoProvider;
    this.insertTaskProvider = insertTaskProvider;
    this.deleteToDoProvider = deleteToDoProvider;
    this.updateTaskProvider = updateTaskProvider;
    this.setTaskDoingProvider = setTaskDoingProvider;
    this.setTaskDoneProvider = setTaskDoneProvider;
    this.getTodoListProvider = getTodoListProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(getOneToDoProvider.get(), insertTaskProvider.get(), deleteToDoProvider.get(), updateTaskProvider.get(), setTaskDoingProvider.get(), setTaskDoneProvider.get(), getTodoListProvider.get());
  }

  public static MainViewModel_Factory create(Provider<GetOneToDoUseCase> getOneToDoProvider,
      Provider<InsertTaskUseCase> insertTaskProvider,
      Provider<DeleteToDoUseCase> deleteToDoProvider,
      Provider<UpdateTaskUseCase> updateTaskProvider,
      Provider<SetTaskDoingUseCase> setTaskDoingProvider,
      Provider<SetTaskDoneUseCase> setTaskDoneProvider,
      Provider<GetAllTodoListUseCase> getTodoListProvider) {
    return new MainViewModel_Factory(getOneToDoProvider, insertTaskProvider, deleteToDoProvider, updateTaskProvider, setTaskDoingProvider, setTaskDoneProvider, getTodoListProvider);
  }

  public static MainViewModel newInstance(GetOneToDoUseCase getOneToDo,
      InsertTaskUseCase insertTask, DeleteToDoUseCase deleteToDo, UpdateTaskUseCase updateTask,
      SetTaskDoingUseCase setTaskDoing, SetTaskDoneUseCase setTaskDone,
      GetAllTodoListUseCase getTodoList) {
    return new MainViewModel(getOneToDo, insertTask, deleteToDo, updateTask, setTaskDoing, setTaskDone, getTodoList);
  }
}
