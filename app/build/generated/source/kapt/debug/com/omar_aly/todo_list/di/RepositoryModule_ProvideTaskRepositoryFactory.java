// Generated by Dagger (https://dagger.dev).
package com.omar_aly.todo_list.di;

import com.omar_aly.todo_list.db.dao.TodoDao;
import com.omar_aly.todo_list.repository.TaskRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideTaskRepositoryFactory implements Factory<TaskRepository> {
  private final Provider<TodoDao> todoDaoProvider;

  private final Provider<CompositeDisposable> compositeProvider;

  public RepositoryModule_ProvideTaskRepositoryFactory(Provider<TodoDao> todoDaoProvider,
      Provider<CompositeDisposable> compositeProvider) {
    this.todoDaoProvider = todoDaoProvider;
    this.compositeProvider = compositeProvider;
  }

  @Override
  public TaskRepository get() {
    return provideTaskRepository(todoDaoProvider.get(), compositeProvider.get());
  }

  public static RepositoryModule_ProvideTaskRepositoryFactory create(
      Provider<TodoDao> todoDaoProvider, Provider<CompositeDisposable> compositeProvider) {
    return new RepositoryModule_ProvideTaskRepositoryFactory(todoDaoProvider, compositeProvider);
  }

  public static TaskRepository provideTaskRepository(TodoDao todoDao,
      CompositeDisposable composite) {
    return Preconditions.checkNotNullFromProvides(RepositoryModule.INSTANCE.provideTaskRepository(todoDao, composite));
  }
}
