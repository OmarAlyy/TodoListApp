// Generated by Dagger (https://dagger.dev).
package com.omar_aly.todo_list.app;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.omar_aly.todo_list.db.AppDatabase;
import com.omar_aly.todo_list.db.dao.TodoDao;
import com.omar_aly.todo_list.di.RepositoryModule;
import com.omar_aly.todo_list.di.RepositoryModule_ProvideTaskRepositoryFactory;
import com.omar_aly.todo_list.di.RoomModule;
import com.omar_aly.todo_list.di.RoomModule_ProvideBlogDAOFactory;
import com.omar_aly.todo_list.di.RoomModule_ProvideBlogDbFactory;
import com.omar_aly.todo_list.di.RoomModule_ProvideCompositeDisposableFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideDeleteTaskUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideGetAllTasksUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideGetTaskUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideInsertTaskUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideSetTaskDoingUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideSetTaskDoneUseCaseFactory;
import com.omar_aly.todo_list.di.UseCaseModule_ProvideUpdateTaskUseCaseFactory;
import com.omar_aly.todo_list.repository.TaskRepository;
import com.omar_aly.todo_list.ui.todo.AddTodoFragment;
import com.omar_aly.todo_list.ui.todo.EditTodoFragment;
import com.omar_aly.todo_list.ui.todo.TodoDetailsFragment;
import com.omar_aly.todo_list.ui.todo.TodoListFragment;
import com.omar_aly.todo_list.usecase.DeleteToDoUseCase;
import com.omar_aly.todo_list.usecase.GetAllTodoListUseCase;
import com.omar_aly.todo_list.usecase.GetOneToDoUseCase;
import com.omar_aly.todo_list.usecase.InsertTaskUseCase;
import com.omar_aly.todo_list.usecase.SetTaskDoingUseCase;
import com.omar_aly.todo_list.usecase.SetTaskDoneUseCase;
import com.omar_aly.todo_list.usecase.UpdateTaskUseCase;
import com.omar_aly.todo_list.viewmodel.MainViewModel;
import com.omar_aly.todo_list.viewmodel.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerApp_HiltComponents_SingletonC extends App_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private volatile Object appDatabase = new MemoizedSentinel();

  private volatile Object todoDao = new MemoizedSentinel();

  private volatile Object taskRepository = new MemoizedSentinel();

  private DaggerApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private AppDatabase appDatabase() {
    Object local = appDatabase;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = appDatabase;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideBlogDbFactory.provideBlogDb(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
          appDatabase = DoubleCheck.reentrantCheck(appDatabase, local);
        }
      }
    }
    return (AppDatabase) local;
  }

  private TodoDao todoDao() {
    Object local = todoDao;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = todoDao;
        if (local instanceof MemoizedSentinel) {
          local = RoomModule_ProvideBlogDAOFactory.provideBlogDAO(appDatabase());
          todoDao = DoubleCheck.reentrantCheck(todoDao, local);
        }
      }
    }
    return (TodoDao) local;
  }

  private TaskRepository taskRepository() {
    Object local = taskRepository;
    if (local instanceof MemoizedSentinel) {
      synchronized (local) {
        local = taskRepository;
        if (local instanceof MemoizedSentinel) {
          local = RepositoryModule_ProvideTaskRepositoryFactory.provideTaskRepository(todoDao(), RoomModule_ProvideCompositeDisposableFactory.provideCompositeDisposable());
          taskRepository = DoubleCheck.reentrantCheck(taskRepository, local);
        }
      }
    }
    return (TaskRepository) local;
  }

  @Override
  public void injectApp(App app) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder repositoryModule(RepositoryModule repositoryModule) {
      Preconditions.checkNotNull(repositoryModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder roomModule(RoomModule roomModule) {
      Preconditions.checkNotNull(roomModule);
      return this;
    }

    public App_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerApp_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private final class ActivityRetainedCBuilder implements App_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public App_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl();
    }
  }

  private final class ActivityRetainedCImpl extends App_HiltComponents.ActivityRetainedC {
    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl() {

    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements App_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public App_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends App_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerApp_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return Collections.<String>singleton(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide());
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements App_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public App_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends App_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectAddTodoFragment(AddTodoFragment addTodoFragment) {
        }

        @Override
        public void injectEditTodoFragment(EditTodoFragment editTodoFragment) {
        }

        @Override
        public void injectTodoDetailsFragment(TodoDetailsFragment todoDetailsFragment) {
        }

        @Override
        public void injectTodoListFragment(TodoListFragment todoListFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements App_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public App_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends App_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements App_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public App_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends App_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements App_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public App_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends App_HiltComponents.ViewModelC {
      private volatile Object getOneToDoUseCase = new MemoizedSentinel();

      private volatile Object insertTaskUseCase = new MemoizedSentinel();

      private volatile Object deleteToDoUseCase = new MemoizedSentinel();

      private volatile Object updateTaskUseCase = new MemoizedSentinel();

      private volatile Object setTaskDoingUseCase = new MemoizedSentinel();

      private volatile Object setTaskDoneUseCase = new MemoizedSentinel();

      private volatile Object getAllTodoListUseCase = new MemoizedSentinel();

      private volatile Provider<MainViewModel> mainViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private GetOneToDoUseCase getOneToDoUseCase() {
        Object local = getOneToDoUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = getOneToDoUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideGetTaskUseCaseFactory.provideGetTaskUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              getOneToDoUseCase = DoubleCheck.reentrantCheck(getOneToDoUseCase, local);
            }
          }
        }
        return (GetOneToDoUseCase) local;
      }

      private InsertTaskUseCase insertTaskUseCase() {
        Object local = insertTaskUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = insertTaskUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideInsertTaskUseCaseFactory.provideInsertTaskUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              insertTaskUseCase = DoubleCheck.reentrantCheck(insertTaskUseCase, local);
            }
          }
        }
        return (InsertTaskUseCase) local;
      }

      private DeleteToDoUseCase deleteToDoUseCase() {
        Object local = deleteToDoUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = deleteToDoUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideDeleteTaskUseCaseFactory.provideDeleteTaskUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              deleteToDoUseCase = DoubleCheck.reentrantCheck(deleteToDoUseCase, local);
            }
          }
        }
        return (DeleteToDoUseCase) local;
      }

      private UpdateTaskUseCase updateTaskUseCase() {
        Object local = updateTaskUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = updateTaskUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideUpdateTaskUseCaseFactory.provideUpdateTaskUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              updateTaskUseCase = DoubleCheck.reentrantCheck(updateTaskUseCase, local);
            }
          }
        }
        return (UpdateTaskUseCase) local;
      }

      private SetTaskDoingUseCase setTaskDoingUseCase() {
        Object local = setTaskDoingUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = setTaskDoingUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideSetTaskDoingUseCaseFactory.provideSetTaskDoingUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              setTaskDoingUseCase = DoubleCheck.reentrantCheck(setTaskDoingUseCase, local);
            }
          }
        }
        return (SetTaskDoingUseCase) local;
      }

      private SetTaskDoneUseCase setTaskDoneUseCase() {
        Object local = setTaskDoneUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = setTaskDoneUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideSetTaskDoneUseCaseFactory.provideSetTaskDoneUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              setTaskDoneUseCase = DoubleCheck.reentrantCheck(setTaskDoneUseCase, local);
            }
          }
        }
        return (SetTaskDoneUseCase) local;
      }

      private GetAllTodoListUseCase getAllTodoListUseCase() {
        Object local = getAllTodoListUseCase;
        if (local instanceof MemoizedSentinel) {
          synchronized (local) {
            local = getAllTodoListUseCase;
            if (local instanceof MemoizedSentinel) {
              local = UseCaseModule_ProvideGetAllTasksUseCaseFactory.provideGetAllTasksUseCase(DaggerApp_HiltComponents_SingletonC.this.taskRepository());
              getAllTodoListUseCase = DoubleCheck.reentrantCheck(getAllTodoListUseCase, local);
            }
          }
        }
        return (GetAllTodoListUseCase) local;
      }

      private MainViewModel mainViewModel() {
        return new MainViewModel(getOneToDoUseCase(), insertTaskUseCase(), deleteToDoUseCase(), updateTaskUseCase(), setTaskDoingUseCase(), setTaskDoneUseCase(), getAllTodoListUseCase());
      }

      private Provider<MainViewModel> mainViewModelProvider() {
        Object local = mainViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          mainViewModelProvider = (Provider<MainViewModel>) local;
        }
        return (Provider<MainViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return Collections.<String, Provider<ViewModel>>singletonMap("com.omar_aly.todo_list.viewmodel.MainViewModel", (Provider) mainViewModelProvider());
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.omar_aly.todo_list.viewmodel.MainViewModel 
            return (T) ViewModelCImpl.this.mainViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements App_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public App_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends App_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
