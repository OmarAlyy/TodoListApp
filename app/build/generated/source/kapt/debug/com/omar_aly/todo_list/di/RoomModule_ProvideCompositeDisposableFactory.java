// Generated by Dagger (https://dagger.dev).
package com.omar_aly.todo_list.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import io.reactivex.disposables.CompositeDisposable;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideCompositeDisposableFactory implements Factory<CompositeDisposable> {
  @Override
  public CompositeDisposable get() {
    return provideCompositeDisposable();
  }

  public static RoomModule_ProvideCompositeDisposableFactory create() {
    return InstanceHolder.INSTANCE;
  }

  public static CompositeDisposable provideCompositeDisposable() {
    return Preconditions.checkNotNullFromProvides(RoomModule.INSTANCE.provideCompositeDisposable());
  }

  private static final class InstanceHolder {
    private static final RoomModule_ProvideCompositeDisposableFactory INSTANCE = new RoomModule_ProvideCompositeDisposableFactory();
  }
}
